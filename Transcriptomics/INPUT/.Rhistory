libsPath()
libPath()
.libPaths
.libPaths()
?block.plsda
library(vroom)
args = as.list(c("Neutrophils","PAPS"))
args[1] <-"mutated"
args[2] <-"unmutated"
args[3] <-"C:/Users/crist/Desktop/BiomiX2.5"
#
directory <- args[3]
iterations = 1
i=1
selection_samples = "NO"
purity_filter = "NO"
Cell_type = "RNA"
setwd(directory[[1]])
COMMAND <- vroom(paste(directory,"COMMANDS.tsv",sep="/"), delim = "\t")
COMMAND_MOFA <- vroom(paste(directory,"COMMANDS_MOFA.tsv",sep="/"), delim = "\t")
DIR_METADATA <- readLines("directory.txt")
STATISTICS = "YES"
library(vroom)
args = as.list(c("Neutrophils","PAPS"))
args[1] <-"mutated"
args[2] <-"unmutated"
args[3] <-"C:/Users/crist/Desktop/BiomiX2.5"
#
directory <- args[3]
iterations = 1
i=1
selection_samples = "NO"
purity_filter = "NO"
Cell_type = "RNA"
setwd(directory[[1]])
COMMAND <- vroom(paste(directory,"COMMANDS.tsv",sep="/"), delim = "\t")
COMMAND_MOFA <- vroom(paste(directory,"COMMANDS_MOFA.tsv",sep="/"), delim = "\t")
DIR_METADATA <- readLines("directory.txt")
STATISTICS = "YES"
renv::load(paste(directory,"_INSTALL",sep="/"))
print("starting data upload and preparation")
library(vroom)
library(dplyr)
library(tidyverse)
library(DESeq2)
library(readxl)
directory2 <- paste(directory,"/Transcriptomics/",sep="")
setwd(directory2)
source(paste(directory2,"Biomix_DGE_GENES_LIMMA_FUNCTIONS.r",sep=""))
directory2 <- paste(directory,"/Transcriptomics/INPUT",sep="")
setwd(directory2)
print(iterations)
COMMAND$DIRECTORIES[i]
if (grepl("\\.xlsx$|\\.xls$", COMMAND$DIRECTORIES[i])) {
Matrix <- read_excel(COMMAND$DIRECTORIES[i])
print("Metadata Excel File read successfully!")
}else{
Matrix <-vroom(COMMAND$DIRECTORIES[i] , delim = "\t", col_names = TRUE)}
if (grepl("\\.xlsx$|\\.xls$", DIR_METADATA)) {
Metadata_total <- read_excel(DIR_METADATA)
print("Metadata Excel File read successfully!")
}else{
Metadata_total <- vroom(DIR_METADATA, delim = "\t", col_names = TRUE)}
COMMAND_ADVANCED <- vroom(paste(directory,"COMMANDS_ADVANCED.tsv",sep="/"), delim = "\t")
log2FC <- as.numeric(COMMAND_ADVANCED$ADVANCED_OPTION_TRASCRIPTOMICS[1])
padju <- as.numeric(COMMAND_ADVANCED$ADVANCED_OPTION_TRASCRIPTOMICS[2])
Gene_panel <- COMMAND_ADVANCED$ADVANCED_OPTION_TRASCRIPTOMICS[3]
n_genes_heat<-as.numeric(COMMAND_ADVANCED$ADVANCED_OPTION_CLUSTERING_OPTIONS[3])
genes <- Matrix$ID
Metadata_Bcell <- Metadata_total %>%
arrange(ID)
Matrix <- Matrix[, -1, drop = FALSE] %>% as.matrix()
Matrix <- Matrix[, order(colnames(Matrix)), drop = FALSE]
Metadata_Bcell <- Metadata_total
num <- which(colnames(Matrix) %in% Metadata_Bcell$ID)
Matrix <- Matrix[, num, drop = FALSE]
num <- which(Metadata_Bcell$ID %in% colnames(Matrix))
Metadata_Bcell <- Metadata_Bcell[num, ] %>%
distinct(ID, .keep_all = TRUE) %>%
arrange(ID)
tryCatch({
Matrix <- Matrix[, order(colnames(Matrix)), drop = FALSE]
}, error = function(e) {
message("Oops! An error occurred: ", e$message)
message("Are you sure the transcriptomics matrix samples are the same as the metadata file?")
})
rownames(Matrix) <- genes
summary(as.factor(Metadata_Bcell$CONDITION))
Metadata_total = NULL
Mart<-read.table(paste(directory,"/Integration/x_BiomiX_DATABASE/mart_export_37.txt", sep=""), sep = ",", header=TRUE)
result <- process_gene_annotation(Matrix, genes, directory)
DGE2 <- result$DGE2
genes_name <- result$genes_name
genes_name_C <- result$genes_name_C
GENE_ANNOTATION <- result$GENE_ANNOTATION
#Order Matrix samples and metadata
DGE2 <- DGE2[,order(colnames(DGE2))]
Metadata_Bcell <- arrange(Metadata_Bcell,ID)
#Chosen disease
num <- Metadata_Bcell$CONDITION == args[1]
#Choise control
numero <- Metadata_Bcell$CONDITION == args[2]
Metadata_Bcell <- Metadata_Bcell[num | numero,]
DGE2 <- DGE2[, num | numero]
if(any(num) & any(num)){ print("Conditions detected in Metadata samples")
}else{print("ERROR: Conditions undetected in Metadata samples")}
