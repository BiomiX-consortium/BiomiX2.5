matrixs <- matrix
matrixs <- add_column(matrixs, Metadata$CONDITION, .after = 1)
colnames(matrixs)[2] <- "CONDITION"
matrixs[,3:ncol(matrixs)]<-apply(matrixs[,3:ncol(matrixs)],2,as.numeric)
#SAVING THE INPUT FOR THE MOFA ANALYSIS
write.table(matrixs,paste(directory2,"/Metabolomics_",Cell_type, "_MOFA.tsv", sep = ""),quote = FALSE, row.names = F, sep = "\t")
DMS_REFERENCE <- function(Condition1){
print(Condition1)
CON <- matrix[Metadata$CONDITION == Condition1,] #Example CONTROL vs SLE patients
samp_CON<-row.names(CON) #RUN IT ALWAYS + ONE DISEASE
CON <-CON[,c(-1,-2)] #RUN IT ALWAYS + ONE DISEASE
CON <-apply(CON,2,as.numeric) #RUN IT ALWAYS + ONE DISEASE
y=NULL
for (i in seq(1:length(colnames(CON)))) {
if (all_same(CON[,i])){
y <-append(y, 1)
}else{
res <- (shapiro.test(CON[,i]))
y <-append(y, res[["p.value"]])
}}
CON<-as.data.frame(CON)
shapiro_test_CON <- y
shapiro <-shapiro_test_CON < 0.05
print(paste(length(shapiro[shapiro== TRUE]), "variables out of", length(shapiro), "not having a normal distribution in", args[2]))
if (length(shapiro[shapiro== TRUE]) > length(shapiro)/2 ) {
print(paste("Suggested Log normalization before the MOFA analysis for", args[2]))
}
rownames(CON) <-samp_CON
return(CON)
}
DMS_TESTED <- function(Condition2){
print(Condition2)
SLE <- matrix[Metadata$CONDITION == Condition2,] #RUN LINE 58 and 59 for CTRL vs SLE
samp_SLE<-row.names(SLE) #RUN LINE 80 and 81 for CTRL vs SLE
SLE <-SLE[,c(-1,-2)] #RUN LINE 109 and 110 for CTRL vs SLE
SLE <-apply(SLE,2,as.numeric) #RUN LINE 130 and 131 for CTRL vs SLE
y=NULL
for (i in seq(1:length(colnames(SLE)))) {
if (all_same(SLE[,i])){
y <-append(y, 1)
}else{
res <- (shapiro.test(SLE[,i]))
y <-append(y, res[["p.value"]])
}}
SLE<-as.data.frame(SLE)
shapiro_test_SLE <- y
shapiro <-shapiro_test_SLE < 0.05
length(shapiro[shapiro== TRUE])
print(paste(length(shapiro[shapiro== TRUE]), "variables out of", length(shapiro), "not having a normal distribution in",args[1]))
if (length(shapiro[shapiro== TRUE]) > length(shapiro)/2 ) {
print(paste("Suggested Log normalization before the MOFA analysis for", args[1]))
}
#If the p.value is bigger than 0.05 we don't have difference
#between our and a normal distribution (generated randomly)
rownames(SLE) <-samp_SLE
# Wilcox test CON vs SLE
pval=NULL
for (i in 1:ncol(SLE)) {
res <-wilcox.test(CON[,i],SLE[,i], alternative = "two.sided")
pval <-append(pval, res[["p.value"]])
}
fold=NULL
for (i in 1:ncol(CON)) {
up <-CON[,i]
up <-up[!is.na(up)]
down <-SLE[,i]
down <-down[!is.na(down)]
FC <- log2(abs(median(down) / median(up)))
fold <-append(fold, FC)}
SLE<-as.data.frame(t(SLE)) #RUN THESE LINES FOR THE CTRL VS SLE COMPARISON
colnames(SLE) <- samp_SLE
SLE$shapiro_pvalue <- shapiro_test_SLE
SLE$p_val <- pval
SLE$log2FC <- fold
return(SLE)
}
#Function to check if all the variable elements are the same
all_same <- function(x) {
x<-x[!is.na(x)]
all(x == x[1])
}
CON <-DMS_REFERENCE(args[2])
TEST <- DMS_TESTED(args[1])
TEST$NAME <- row.names(TEST)
gc()
dir.create(path = paste(directory,"/Metabolomics/OUTPUT/", sep ="") ,  showWarnings = TRUE, recursive = TRUE, mode = "0777")
dir.create(path = paste(directory,"/Metabolomics/OUTPUT/", Cell_type, "_", args[1], "_vs_", args[2], sep ="") ,  showWarnings = TRUE, recursive = TRUE, mode = "0777")
directory2 <- paste(directory,"/Metabolomics/OUTPUT/", Cell_type, "_", args[1], "_vs_", args[2], sep ="")
setwd(directory2)
gc()
total <- merge(TEST,annotation,by.x = "NAME", by.y = "name",all.x = TRUE)
total$padj = p.adjust(total$p_val, method = "fdr")
total_min <- total[,c("NAME", "log2FC", "p_val", "padj")]
total_min <- total_min %>% arrange(padj)
write.table(total_min,paste(directory2,"/",Cell_type,"_",args[1],"_vs_",args[2],"_peak_statistics.tsv", sep = ""),quote = FALSE, row.names = F, sep = "\t")
library(stringr)
if(ANNOTATION == "MS1"){
adduct_list <- COMMAND_ADVANCED$ADVANCED_OPTION_METABOLOMICS_ANNOTATION_MS1_2[1]
mode_ions <- COMMAND_ADVANCED$ADVANCED_OPTION_METABOLOMICS_ANNOTATION_MS1[1]
adduct_list_2 <- COMMAND_ADVANCED$ADVANCED_OPTION_METABOLOMICS_ANNOTATION_MS1_2[2]
tolerance_list <- COMMAND_ADVANCED$ADVANCED_OPTION_METABOLOMICS_ANNOTATION_MS1[3]
list_database_ms1 <- COMMAND_ADVANCED$ADVANCED_OPTION_METABOLOMICS_ANNOTATION_MS1_2[3]}
ANNOTATION
ANNOTATION = "MS1"
if(ANNOTATION == "MS1"){
adduct_list <- COMMAND_ADVANCED$ADVANCED_OPTION_METABOLOMICS_ANNOTATION_MS1_2[1]
mode_ions <- COMMAND_ADVANCED$ADVANCED_OPTION_METABOLOMICS_ANNOTATION_MS1[1]
adduct_list_2 <- COMMAND_ADVANCED$ADVANCED_OPTION_METABOLOMICS_ANNOTATION_MS1_2[2]
tolerance_list <- COMMAND_ADVANCED$ADVANCED_OPTION_METABOLOMICS_ANNOTATION_MS1[3]
list_database_ms1 <- COMMAND_ADVANCED$ADVANCED_OPTION_METABOLOMICS_ANNOTATION_MS1_2[3]}
#==============================================================================
if(mode_ions == "positive" | mode_ions == "negative"){
Positive_adduct <- as.array(adduct_list)
Positive_adduct <- strsplit(Positive_adduct, "/")
Positive_adduct <- Positive_adduct[[1]]
Negative_adduct <- as.array(adduct_list_2)
Negative_adduct <- strsplit(Negative_adduct, "/")
Negative_adduct <- Negative_adduct[[1]]
if (is.na(Negative_adduct)){
ducts <- as.list(Positive_adduct)
#ducts <- Positive_adduct %>% str_c(collapse = ",")
#ducts <- paste("[",ducts,"]",sep = "")
} else if (is.na(Positive_adduct)){
ducts <- as.list(Negative_adduct)
#ducts <- Positive_adduct  %>% str_c(collapse = ",")
#ducts <- paste("[",ducts,"]",sep = "")
} else{
#ducts <- c(Positive_adduct,Negative_adduct)
print("ERROR YOU SELECTED POSITIVE AND NEGATIVE ADDUCTS AT THE SAME TIME!!")
}
masses_mode <- as.array("mz")
Ion_mode <- as.array(mode_ions)
} else if(mode_ions == "neutral"){
Ion_mode <- as.array("neutral")
masses_mode <- as.array("neutral")
ducts <- "[\"all\"]"
}
tolerance <- as.array(tolerance_list)
databases <- as.array(list_database_ms1)
databases <- strsplit(databases, "/")
databases <- databases[[1]]
databases <- as.list(databases)
#MASS <- as.array(round(as.numeric(total$`m/z`),4))
MASS <- round(as.numeric(total$`m/z`),4)
#RT <- as.array(total$RT_min)
RT <- as.numeric(total$RT_min)
cat(MASS, fill = getOption("width"), sep = ",")
cat(RT, fill = getOption("width"), sep = ",")
#THIS IF ELSE ALLOWS TO UPLOAD A PREVIOUS ANNOTATION MADE ON THE SAME DATASET.
#IF THIS ANNOTATION IS NOT AVAILABLE OR IF IT IS THE FIRST ANALYSIS WILL AS TO
#CEU MASS MEDIATOR TO DO IT.
if (file.exists(paste("Annotation_metabolites_", Cell_type,"_", args[1], "_vs_", args[2],".tsv", sep = "")) == TRUE){
print("File available locally, using the local version")
advanced_batch_df <- vroom(paste(directory2,"/Annotation_metabolites_",Cell_type,"_", args[1], "_vs_", args[2],".tsv", sep = ""),delim="\t",col_names = TRUE)
}
if (nrow(advanced_batch_df) != 0 || ncol(advanced_batch_df) != 0){
print("File is empty â€” using CMMR and CEUMASS mediator server to retrieve annotation.")
}else{
library(cmmr)
#Allow to user to change the option based on their request
#  '["hmdb","metlin", "kegg", "lipidmaps"]'
# '["M+H","M+Na","M+NH4","M+H-H2O"]'
# databases <-list("hmdb", "metlin", "kegg", "lipidmaps" )
# ducts <-list("M+H", "M+Na", "M+NH4", "M+H-H2O" )
# masses_mode = "mz"
# Ion_mode = "positive"
# tolerance = 10
# MASSI <- c(399.3367, 421.31686, 315.2424, 337.2234, 280.2402)
# RT <- c(18.842525, 18.842525, 8.144917, 8.144917, 28.269503, 4.021555)
# advanced_batch_df <- advanced_batch_search(
#         cmm_url             = paste0(
#                 'http://ceumass.eps.uspceu.es/mediator/api/v3/',
#                 'advancedbatch'),
#         chemical_alphabet   = 'all',
#         modifiers_type      = 'none',
#         metabolites_type    = 'all-except-peptides',
#         databases           = databases,
#         masses_mode         = masses_mode,
#         ion_mode            = Ion_mode,
#         adducts             = ducts,
#         deuterium           = 'false',
#         tolerance           = tolerance,
#         tolerance_mode      = "ppm",
#         #masses              = MASS,
#         masses              = "[114.0907,245.0765]",
#         all_masses          = '[]',
#         #retention_times     = RT,
#         retention_times     = "[2.316083333,0.948808333]",
#         all_retention_times = '[]'
# )
library(cmmr)
advanced_batch_df <- advanced_batch_search(
cmm_url = "https://ceumass.eps.uspceu.es/api/v3/advancedbatch",
chemical_alphabet = "all",
modifiers_type = "none",
metabolites_type = "all-except-peptides",
databases = databases,  #create a list
masses_mode = as.character(masses_mode),
ion_mode = as.character(Ion_mode),
adducts = ducts,
deuterium = FALSE,
tolerance = as.numeric(tolerance),
tolerance_mode = "ppm",
masses = MASS,
all_masses = list(),
retention_times = RT ,
all_retention_times = list(),
composite_spectra = list(),
all_composite_spectra = list()
)
head(advanced_batch_df)
str(advanced_batch_df)
#NOTE ADD THE OPTIONS WHEN CEU MASS MEDIATOR WILL WORK
print("File unavailable locally, generating the annotation from Ceu Mass Mediator database")
write.table(advanced_batch_df,paste(directory2,"/Annotation_metabolites_",Cell_type,"_", args[1], "_vs_", args[2] ,".tsv", sep = ""),quote = FALSE, row.names = F, sep = "\t")
}
library(cmmr)
advanced_batch_df <- advanced_batch_search(
cmm_url = "https://ceumass.eps.uspceu.es/mediator/api/v3/advancedbatch",
chemical_alphabet = "all",
modifiers_type = "none",
metabolites_type = "all-except-peptides",
databases = list("hmdb"),
masses_mode = "mz",
ion_mode = "positive",
adducts = list("all"),
deuterium = FALSE,
tolerance = 10.0,
tolerance_mode = "ppm",
masses = c(399.3367, 421.31686, 315.2424, 337.2234, 280.2402),
all_masses = list(),
retention_times = c(18.842525, 18.842525, 8.144917, 8.144917, 28.269503, 4.021555),
all_retention_times = list(),
composite_spectra = list(),
all_composite_spectra = list()
)
library(cmmr)
advanced_batch_df <- advanced_batch_search(
cmm_url = "https://ceumass.eps.uspceu.es/mediator/api/v3/advancedbatch",
chemical_alphabet = "all",
modifiers_type = "none",
metabolites_type = "all-except-peptides",
databases = list("hmdb"),
masses_mode = "mz",
ion_mode = "positive",
adducts = list("all"),
deuterium = FALSE,
tolerance = 10.0,
tolerance_mode = "ppm",
masses = c(399.3367, 421.31686, 315.2424, 337.2234, 280.2402),
all_masses = list(),
retention_times = c(18.842525, 18.842525, 8.144917, 8.144917, 28.269503, 4.021555),
all_retention_times = list(),
composite_spectra = list(),
all_composite_spectra = list()
)
str(advanced_batch_df)
head(advanced_batch_df)
library(cmmr)
advanced_batch_df <- advanced_batch_search(
cmm_url = "https://ceumass.eps.uspceu.es/api/v3/advancedbatch",
chemical_alphabet = "all",
modifiers_type = "none",
metabolites_type = "all-except-peptides",
databases = databases,  #create a list
masses_mode = as.character(masses_mode),
ion_mode = as.character(Ion_mode),
adducts = ducts,
deuterium = FALSE,
tolerance = as.numeric(tolerance),
tolerance_mode = "ppm",
masses = MASS,
all_masses = list(),
retention_times = RT ,
all_retention_times = list(),
composite_spectra = list(),
all_composite_spectra = list()
)
head(advanced_batch_df)
str(advanced_batch_df)
print("File unavailable locally, generating the annotation from Ceu Mass Mediator database")
write.table(advanced_batch_df,paste(directory2,"/Annotation_metabolites_",Cell_type,"_", args[1], "_vs_", args[2] ,".tsv", sep = ""),quote = FALSE, row.names = F, sep = "\t")
head(advanced_batch_df)
str(advanced_batch_df)
gc()
as.numeric(total$`m/z`) %in% advanced_batch_df$experimental_mass
advanced_batch_df$experimental_mass <- as.character(round(as.numeric(advanced_batch_df$experimental_mass),4))
total$`m/z` <- as.character(round(as.numeric(total$`m/z`),4))
total$`m/z`<-as.character(total$`m/z`)
tat<-merge(total,advanced_batch_df, by.x="m/z", by.y="experimental_mass", all.x=TRUE)
total$`m/z` %in% advanced_batch_df$experimental_mass
x <- colnames(tat) %in% matrix$ID
tat <- tat[,!x]
print(i)
print(COMMAND$LABEL[i])
filtering= 0
#### FILTER OF TISSUES SPECIFIC METABOLITES IN HMDB #####
#IF THE ANNOTATION FOR SERUM OR URINE IS AVAILABLE IT IS USED
#TO FILTER THE RESULTS OBTAINED USING CEU MASS MEDIATOR
if (str_detect(COMMAND$LABEL[i], fixed("Serum", ignore_case=TRUE)) | str_detect(COMMAND$LABEL[i], fixed("Plasma", ignore_case=TRUE))){
#IF the peak annotation in ms1 doesn't have a match in the tissue selected
#its annotation is eliminated and degradated to level4.
to_eliminate2 =NULL
for (pe in unique(tat$name)){
sat<-which(tat$name == pe)
if(sum(tat$HMDB[sat] %in% serum_metabolite$HMDB_ID) == 0){
tat[sat,9:ncol(tat)] <- NA
to_eliminate2<-append(to_eliminate2,sat[-1])
}
}
tat <- tat[-to_eliminate2,]
total <-merge(tat,serum_metabolite, by.x="HMDB", by.y="HMDB_ID",all.x=TRUE )
exit<-!is.na(total$identifier) & is.na(total$SMILES)
total <- total[!exit,]
filtering <- "YES"
} else if (str_detect(COMMAND$LABEL[i], fixed("Urine", ignore_case=TRUE))) {
#IF the peak annotation in ms1 doesn't have a match in the tissue selected
#its annotation is eliminated and degradated to level4.
to_eliminate2 =NULL
for (pe in unique(tat$name)){
sat<-which(tat$name == pe)
if(sum(tat$HMDB[sat] %in% urine_metabolite$HMDB_ID) == 0){
tat[sat,9:ncol(tat)] <- NA
to_eliminate2<-append(to_eliminate2,sat[-1])
}
}
tat <- tat[-to_eliminate2,]
total <-merge(tat,urine_metabolite, by.x="HMDB", by.y="HMDB_ID",all.x=TRUE )
exit<-!is.na(total$identifier) & is.na(total$SMILES)
total <- total[!exit,]
filtering <- "YES"
gc()
} else if (str_detect(COMMAND$LABEL[i], fixed("Saliva", ignore_case=TRUE))) {
#IF the peak annotation in ms1 doesn't have a match in the tissue selected
#its annotation is eliminated and degradated to level4.
to_eliminate2 =NULL
for (pe in unique(tat$name)){
sat<-which(tat$name == pe)
if(sum(tat$HMDB[sat] %in% saliva_metabolite$HMDB_ID) == 0){
tat[sat,9:ncol(tat)] <- NA
to_eliminate2<-append(to_eliminate2,sat[-1])
}
}
tat <- tat[-to_eliminate2,]
total <-merge(tat,saliva_metabolite, by.x="HMDB", by.y="HMDB_ID",all.x=TRUE )
exit<-!is.na(total$identifier) & is.na(total$SMILES)
total <- total[!exit,]
filtering <- "YES"
gc()
} else if (str_detect(COMMAND$LABEL[i], fixed("Cerebrospinal Fluid", ignore_case=TRUE))) {
#IF the peak annotation in ms1 doesn't have a match in the tissue selected
#its annotation is eliminated and degradated to level4.
to_eliminate2 =NULL
for (pe in unique(tat$name)){
sat<-which(tat$name == pe)
if(sum(tat$HMDB[sat] %in% CSF_metabolite$HMDB_ID) == 0){
tat[sat,9:ncol(tat)] <- NA
to_eliminate2<-append(to_eliminate2,sat[-1])
}
}
tat <- tat[-to_eliminate2,]
total <-merge(tat,CSF_metabolite, by.x="HMDB", by.y="HMDB_ID",all.x=TRUE )
exit<-!is.na(total$identifier) & is.na(total$SMILES)
total <- total[!exit,]
filtering <- "YES"
gc()
} else if (str_detect(COMMAND$LABEL[i], fixed("Feces", ignore_case=TRUE))) {
#IF the peak annotation in ms1 doesn't have a match in the tissue selected
#its annotation is eliminated and degradated to level4.
to_eliminate2 =NULL
for (pe in unique(tat$name)){
sat<-which(tat$name == pe)
if(sum(tat$HMDB[sat] %in% Feces_metabolite$HMDB_ID) == 0){
tat[sat,9:ncol(tat)] <- NA
to_eliminate2<-append(to_eliminate2,sat[-1])
}
}
tat <- tat[-to_eliminate2,]
total <-merge(tat,Feces_metabolite, by.x="HMDB", by.y="HMDB_ID",all.x=TRUE )
exit<-!is.na(total$identifier) & is.na(total$SMILES)
total <- total[!exit,]
filtering <- "YES"
gc()
} else if (str_detect(COMMAND$LABEL[i], fixed("Sweat", ignore_case=TRUE))) {
#IF the peak annotation in ms1 doesn't have a match in the tissue selected
#its annotation is eliminated and degradated to level4.
to_eliminate2 =NULL
for (pe in unique(tat$name)){
sat<-which(tat$name == pe)
if(sum(tat$HMDB[sat] %in% sweat_metabolite$HMDB_ID) == 0){
tat[sat,9:ncol(tat)] <- NA
to_eliminate2<-append(to_eliminate2,sat[-1])
}
}
tat <- tat[-to_eliminate2,]
total <-merge(tat,sweat_metabolite, by.x="HMDB", by.y="HMDB_ID",all.x=TRUE )
exit<-!is.na(total$identifier) & is.na(total$SMILES)
total <- total[!exit,]
filtering <- "YES"
gc()
} else if (str_detect(COMMAND$LABEL[i], fixed("Brest Milk", ignore_case=TRUE))) {
#IF the peak annotation in ms1 doesn't have a match in the tissue selected
#its annotation is eliminated and degradated to level4.
to_eliminate2 =NULL
for (pe in unique(tat$name)){
sat<-which(tat$name == pe)
if(sum(tat$HMDB[sat] %in% breast_milk_metabolite$HMDB_ID) == 0){
tat[sat,9:ncol(tat)] <- NA
to_eliminate2<-append(to_eliminate2,sat[-1])
}
}
tat <- tat[-to_eliminate2,]
total <-merge(tat,breast_milk_metabolite, by.x="HMDB", by.y="HMDB_ID",all.x=TRUE )
exit<-!is.na(total$identifier) & is.na(total$SMILES)
total <- total[!exit,]
filtering <- "YES"
gc()
} else if (str_detect(COMMAND$LABEL[i], fixed("Bile", ignore_case=TRUE))) {
#IF the peak annotation in ms1 doesn't have a match in the tissue selected
#its annotation is eliminated and degradated to level4.
to_eliminate2 =NULL
for (pe in unique(tat$name)){
sat<-which(tat$name == pe)
if(sum(tat$HMDB[sat] %in% bile_metabolite$HMDB_ID) == 0){
tat[sat,9:ncol(tat)] <- NA
to_eliminate2<-append(to_eliminate2,sat[-1])
}
}
tat <- tat[-to_eliminate2,]
total <-merge(tat,bile_metabolite, by.x="HMDB", by.y="HMDB_ID",all.x=TRUE )
exit<-!is.na(total$identifier) & is.na(total$SMILES)
total <- total[!exit,]
filtering <- "YES"
gc()
} else if (str_detect(COMMAND$LABEL[i], fixed("Amniotic Fluid", ignore_case=TRUE))) {
#IF the peak annotation in ms1 doesn't have a match in the tissue selected
#its annotation is eliminated and degradated to level4.
to_eliminate2 =NULL
for (pe in unique(tat$name)){
sat<-which(tat$name == pe)
if(sum(tat$HMDB[sat] %in% AF_metabolite$HMDB_ID) == 0){
tat[sat,9:ncol(tat)] <- NA
to_eliminate2<-append(to_eliminate2,sat[-1])
}
}
tat <- tat[-to_eliminate2,]
total <-merge(tat,AF_metabolite, by.x="HMDB", by.y="HMDB_ID",all.x=TRUE )
exit<-!is.na(total$identifier) & is.na(total$SMILES)
total <- total[!exit,]
filtering <- "YES"
gc()
} else {
print("NO BIOSPECIMENS filtering")
total <- tat
filtering <- "NO"
colnames(total)[which(colnames(total) == "NAME")] <- "NAME.x"
}
totalshOK <- total %>% filter(padj <padju)
total <- total %>% arrange(padj)
print(colnames(total))
total$MS2_annot <- "NA"
total$annot_level <- "Level_3"
to_eliminate=NULL
to_eliminate2=NULL
if(ANNOTATION == "MS2"){
#This script is recognizing the metabolites not annotated by MS1, but annotated in MS2
#removing the MS1 information an replacing them entirely from the MS2 one
for(yy in 1:length(unique(annot$peak_number))){
t<-annot$peak_number %in% unique(annot$peak_number)[yy]
mix<-paste(annot$Compound.name[t], collapse = "/")
mix2<-paste(annot$Adduct[t], collapse = "/")
mix3<-paste(annot$mz.error[t], collapse = "/")
if (sum(is.na(annot$HMDB.ID[t])) == 0){
x<-substr(total$HMDB,7,11) %in% substr(annot$HMDB.ID[t], 5,9)
}else{
x <- FALSE
}
if(sum(x) == 0){
print(paste(unique(annot$peak_number)[yy], "not_annotated",sep="_"))
z <-which(total$NAME.x %in% unique(annot$peak_number)[yy])
total[z,c(11:(ncol(total)-2))] <- "NA"
total[z[1],"name"] <- mix
total[z[1],"adduct"] <- mix2
total[z[1],"error_ppm"] <- mix3
total[z[1],"MS2_annot"] <- mix
total[z[1],"annot_level"] <- "Level_2"
to_eliminate2<-append(to_eliminate2,z[-1])
#In this section the MS2 information replace the MS1
#The MS1 multiple annotations are removed to keep a single MS2 one.
}else{
t<-total$HMDB[x]
t<-which(total$HMDB %in% t & total$NAME.x == unique(annot$peak_number)[yy])
for(c in t){
print(paste(total$NAME.x[c], "already_annotated",sep="_"))
total$MS2_annot[c] <- mix
total$name[c] <- mix
total$adduct[c] <- mix2
total$error_ppm[c] <- mix3
total$annot_level[c]  <- "Level_2"
}
out<-which(total$NAME.x == unique(annot$peak_number)[yy] & total$annot_level == "Level_3")
to_eliminate2 <-append(to_eliminate2,out)
#This part of the script saves the metabolites annotated with a MS2 and remove the previous
#MS1 annotated metabolites
}
}
if(length(to_eliminate2) != 0){
total<-total[-to_eliminate2,]
}
total$annot_level[is.na(total$name)] <- "Level_4"
}
write.table(total,paste(directory2,"/",Cell_type,"_",args[1],"_vs_",args[2],"_results.tsv", sep = ""),quote = FALSE, row.names = F, sep = "\t")
