}
tat <- tat[-to_eliminate2,]
total <-merge(tat,AF_metabolite, by.x="HMDB", by.y="HMDB_ID",all.x=TRUE )
exit<-!is.na(total$identifier) & is.na(total$SMILES)
total <- total[!exit,]
filtering <- "YES"
gc()
} else {
print("NO BIOSPECIMENS filtering")
total <- tat
filtering <- "NO"
colnames(total)[which(colnames(total) == "NAME")] <- "NAME.x"
}
totalshOK <- total %>% filter(padj <padju)
total <- total %>% arrange(padj)
print(colnames(total))
# x <- colnames(total) %in% matrix$ID
# total <- total[,!x]
total$MS2_annot <- "NA"
total$annot_level <- "Level_3"
to_eliminate=NULL
to_eliminate2=NULL
if(ANNOTATION == "MS2"){
#This script is recognizing the metabolites not annotated by MS1, but annotated in MS2
#removing the MS1 information an replacing them entirely from the MS2 one
for(yy in 1:length(unique(annot$peak_number))){
t<-annot$peak_number %in% unique(annot$peak_number)[yy]
mix<-paste(annot$Compound.name[t], collapse = "/")
mix2<-paste(annot$Adduct[t], collapse = "/")
mix3<-paste(annot$mz.error[t], collapse = "/")
if (sum(is.na(annot$HMDB.ID[t])) == 0){
x<-substr(total$HMDB,7,11) %in% substr(annot$HMDB.ID[t], 5,9)
}else{
x <- FALSE
}
if(sum(x) == 0){
print(paste(unique(annot$peak_number)[yy], "not_annotated",sep="_"))
z <-which(total$NAME.x %in% unique(annot$peak_number)[yy])
total[z,c(11:(ncol(total)-2))] <- "NA"
total[z[1],"name"] <- mix
total[z[1],"adduct"] <- mix2
total[z[1],"error_ppm"] <- mix3
total[z[1],"MS2_annot"] <- mix
total[z[1],"annot_level"] <- "Level_2"
to_eliminate2<-append(to_eliminate2,z[-1])
#In this section the MS2 information replace the MS1
#The MS1 multiple annotations are removed to keep a single MS2 one.
}else{
t<-total$HMDB[x]
t<-which(total$HMDB %in% t & total$NAME.x == unique(annot$peak_number)[yy])
for(c in t){
print(paste(total$NAME.x[c], "already_annotated",sep="_"))
total$MS2_annot[c] <- mix
total$name[c] <- mix
total$adduct[c] <- mix2
total$error_ppm[c] <- mix3
total$annot_level[c]  <- "Level_2"
}
out<-which(total$NAME.x == unique(annot$peak_number)[yy] & total$annot_level == "Level_3")
to_eliminate2 <-append(to_eliminate2,out)
#This part of the script saves the metabolites annotated with a MS2 and remove the previous
#MS1 annotated metabolites
}
}
if(length(to_eliminate2) != 0){
total<-total[-to_eliminate2,]
}
total$annot_level[is.na(total$name)] <- "Level_4"
}
write.table(total,paste(directory2,"/",Cell_type,"_",args[1],"_vs_",args[2],"_results.tsv", sep = ""),quote = FALSE, row.names = F, sep = "\t")
pdf(file=paste("plot_DMA_", args[1],"_",args[2],"_", Cell_type,".pdf",sep=""))
library(ggplot2)
library(ggrepel)
#IF THE SERUM/URINE FILTERING HAS BEEN MADE IT WILL WILL DO THE PLOT AND
#SAVE THE UP AND DOWN REGULATED METABOLITES
total$padj<-as.numeric(total$padj)
total$log2FC<-as.numeric(total$log2FC)
ALTI <- subset(total, padj < padju)
ALTI <-subset(ALTI, log2FC > LogFC)
ALTI <- ALTI[order(ALTI$padj), ]
#
BASSI <- subset(total, padj < padju)
BASSI <- subset(BASSI, log2FC < -LogFC)
BASSI <- BASSI[order(BASSI$padj), ]
x <- total$NAME.x %in% ALTI$NAME.x
NO<-total[!x,]
x <- NO$NAME.x %in% BASSI$NAME.x
NO<-NO[!x,]
write.table(x=ALTI$Name   , file= paste(Cell_type,"_",args[1],"_",args[2],"_UP.tsv",sep="")  ,sep= "\t", row.names = FALSE, col.names = FALSE,  quote = FALSE)
write.table(x=BASSI$Name  , file= paste(Cell_type,"_",args[1],"_",args[2],"_DOWN.tsv",sep=""),sep= "\t", row.names = FALSE, col.names = FALSE,  quote = FALSE)
write.table(x=ALTI   , file= paste(Cell_type,"_",args[1],"_",args[2],"_METABUP.tsv",sep="") ,sep= "\t", row.names = FALSE, col.names = TRUE,  quote = FALSE)
write.table(x=BASSI  , file= paste(Cell_type,"_",args[1],"_",args[2],"_METABDOWN.tsv",sep=""),sep= "\t", row.names = FALSE, col.names = TRUE,  quote = FALSE)
write.table(Metadata[order(Metadata$CONDITION, decreasing = TRUE),c("ID","CONDITION")],
file= paste(args[1], "_",args[2],"_",Cell_type, "_metadata.tsv", sep =""),sep = "\t", quote= FALSE, row.names = FALSE)
ALTI <- ALTI %>% distinct(NAME.x, .keep_all = TRUE)
BASSI <- BASSI %>% distinct(NAME.x, .keep_all = TRUE)
NO <- NO %>% distinct(NAME.x, .keep_all = TRUE)
if (nrow(ALTI) == 0){
SKIP_ALTI <- FALSE}else{SKIP_ALTI <- TRUE}
if (nrow(BASSI) == 0){
SKIP_BASSI <- FALSE}else{SKIP_BASSI <- TRUE}
p <-ggplot() +
ggtitle( paste("DGE", Cell_type,"_", args[1], "_vs_", args[2],sep="")) + theme(
plot.title = element_text(color="black", size=14, face="bold.italic", hjust = 0.5),
axis.title.x = element_text(color="black", size=14, face="bold"),
axis.title.y = element_text(color="black", size=14, face="bold")) +
ylab("-log10(padj)") + xlab("log2FC")
if (SKIP_ALTI){
p <- p + geom_point(data = ALTI, aes(x = log2FC, y = -log10(padj)), color = "red") +
geom_text_repel(data = ALTI[c(1:25), ], aes(x = log2FC , y = -log10(padj), label=name),hjust=0, vjust=0,size=3, arrow = NULL, force = 10, force_pull = 1, max.overlaps = 10)}
if (SKIP_BASSI){
p <- p + geom_point(data = BASSI, aes(x = log2FC, y = -log10(padj)), color = "blue") +
geom_text_repel(data = BASSI[1:25, ], aes(x = log2FC , y = -log10(padj), label=name),hjust=0, vjust=0,size=3, force = 20, force_pull = 1, max.overlaps = 10)}
p <- p + geom_point(data = NO, aes(x = log2FC, y = -log10(padj)), color = "black")
p2 <- p + geom_vline(xintercept=c(-LogFC,LogFC), col="red") +
geom_hline(yintercept=-log10(padju), col="red")
print(p2)
dev.off()
###  HEATMAP ###
if (length(c(ALTI$NAME.x, BASSI$NAME.x)) > 2){
#ADD HEATMAP CREATION HERE
if (nrow(ALTI) > Heatmap_genes){
ALTI <- ALTI[1:Heatmap_genes,]}
if (nrow(BASSI) > Heatmap_genes){
BASSI <- BASSI[1:Heatmap_genes,]}
#HEATMAP INPUT ARE NORMALIZED
Heat<-matrix[,colnames(matrix) %in% c(ALTI$NAME.x, BASSI$NAME.x),drop = FALSE]
samples <- rownames(Heat)
Heat <- as.data.frame(Heat)
Heat <-apply(Heat,2,as.numeric)
rownames(Heat) <-samples
Heat<-t(Heat)
Heat[Heat == 0] <- 1
Heat <-apply(Heat,2,log10)
annot_vis<-rownames(Heat)
pool<-rbind(ALTI,BASSI)
SAVED <- NULL
for (ix in annot_vis){
iu<- pool$NAME.x %in% ix
Gene <- as.character(pool$Name[which(iu)])
SAVED<-append(Gene, SAVED)}
SAVED <- as.character(SAVED)
SAVED<-rev(SAVED)
for (ix in 1:length(samples)){
if(!is.na(SAVED[ix])){
rownames(Heat)[ix] <- SAVED[ix]
}
}
library(ComplexHeatmap)
setwd(directory2)
pdf(file= paste("Heatmap_top_genes_", Cell_type,"_", args[2],"_vs_", args[1],".pdf",sep=""))
#dev.new()
library(circlize)
col_fun = colorRamp2(c(min(Heat, na.rm = TRUE), mean(colMeans(Heat, na.rm = TRUE)), max(Heat, na.rm = TRUE)), c("blue", "black", "yellow"))
col_fun(seq(-3, 3))
t<-c("CTRL" = "blue", "SLE" = "red")
attr(t, "names")[1]<- args[2]
attr(t, "names")[2]<- args[1]
attr(t, "names")
ha = HeatmapAnnotation(condition = Metadata$CONDITION,
col = list(condition = t))
Heat[is.na(Heat)] <- 0 #Add 0 when there are 0 values to allow the Heatmap plot
p<- Heatmap(Heat,km =2, name = "SD_score", col = col_fun, clustering_distance_rows = "pearson", clustering_method_rows= "complete", clustering_method_columns ="ward.D", row_dend_width = unit(0.5, "cm"),column_dend_height = unit(60, "mm"), column_names_gp = grid::gpar(fontsize = 6),
row_names_gp = grid::gpar(fontsize = 8), top_annotation = ha)
print(p)
#If you want to visualize the group
colnames(Heat)<- Metadata$CONDITION
ha = HeatmapAnnotation(condition = Metadata$CONDITION,
col = list(condition = t))
p<- Heatmap(Heat,km =2, name = "SD_score", col = col_fun, clustering_distance_rows = "pearson", clustering_method_rows= "complete", clustering_method_columns ="ward.D", row_dend_width = unit(0.5, "cm"),column_dend_height = unit(60, "mm"), column_names_gp = grid::gpar(fontsize = 6),
row_names_gp = grid::gpar(fontsize = 8), top_annotation = ha)
print(p)
dev.off()
}
##### MetPath  #####
library(metpath)
library(tidyverse)
library(dplyr)
dir.create(path = paste(directory2,"/Pathway_analysis/", "HMDB_", Cell_type, "_",args[1],"_vs_", args[2], sep ="") ,  showWarnings = TRUE, recursive = TRUE, mode = "0777")
setwd(paste(directory2,"/Pathway_analysis/", "HMDB_", Cell_type, "_",args[1],"_vs_", args[2], sep =""))
saved<-total
#Filtering of peak with one or max 2 annotation
peak_repeated <-total %>% count(NAME.x)
total<- total[!total$NAME.x %in% peak_repeated$NAME.x[peak_repeated$n > 2],]
total <- total %>% arrange(NAME.x)
#Eliminate level 3 peaks with level 2 annotation found
peak_repeated<-total$NAME.x[total$annot_level == "Level_2"]
outs<-total$NAME.x %in% peak_repeated & total$annot_level == "Level_3"
total <-total[!outs,]
#Filtering annotation couples where both or a single one contains the annotation
#Selection of best annotation in peak with 2 annotation based on minimun ppm error
iter<-which(duplicated(total$NAME.x) & !total$annot_level == "Level_2")
to_elim = NULL
iterat=NULL
for (u in iter){
n1<-u
s1<-total$error_ppm[u]
n2<-u-1
s2<-total$error_ppm[u-1]
#Statement to treat missing ppm_errors values
if (is.na(s1) | is.na(s2)){
if(is.na(s1) & is.na(s2)){
to_elim<-append(to_elim, n2)
}else if(is.na(s1)){
to_elim<-append(to_elim, n1)
}else{#(is.na(s2))
to_elim<-append(to_elim, n2)
}
}else{
if(as.numeric(s1) == as.numeric(s2)){
#The results with the same ppm error are kept for the metpath analysis
}else{
elim <- max(as.numeric(s1), as.numeric(s2))
if(elim == as.numeric(s1)){
print = as.numeric(s1)
to_elim<-append(to_elim, n1)
}
if(elim == as.numeric(s2)){
to_elim<-append(to_elim, n2)
}
}
}
}
if(length(to_elim) != 0){
total <- total[-to_elim, ]}
query_id <- total[which(total$p_val < 0.05),] #REPLACE IT WITH P.ADJ
query_id_saved <- saved[which(saved$p_val < 0.05),]
#SAVE PATHWAY ANALYSIS RESULTS
if (nrow(query_id) != 0){
dir.create(path = paste(directory2,"/Pathway_analysis/", "HMDB_", Cell_type, "_",args[1],"_vs_", args[2], sep ="") ,  showWarnings = TRUE, recursive = TRUE, mode = "0777")
setwd(paste(directory2,"/Pathway_analysis/", "HMDB_", Cell_type, "_",args[1],"_vs_", args[2], sep =""))
pathway_class_HMDB =
metpath::pathway_class(hmdb_pathway)
pathway_class_KEGG =
metpath::pathway_class(kegg_hsa_pathway)
pdf(file=paste("Pathway_analysis_HMDB_", args[1],"_",args[2],"_", Cell_type,".pdf", sep=""))
gc()
remain_idx = which(unlist(pathway_class_HMDB) == "Metabolic;primary_pathway")
hmdb_pathway = hmdb_pathway[remain_idx]
hmdb_pathway
result =
enrich_hmdb(query_id = unique(query_id$HMDB),
query_type = "compound",
id_type = "HMDB",
pathway_database = hmdb_pathway,
only_primary_pathway = TRUE,
p_cutoff = 0.05,
p_adjust_method = "BH",
threads = as.numeric(COMMAND_ADVANCED[3,3]))
result
if (length(result) != 0){
x<-enrich_bar_plot(
object = result,
x_axis = "p_value_adjust",
cutoff = 1.1,
top = 10
)
print(x)
x <-enrich_scatter_plot(object = result)
print(x)
write.table(result@result,paste(directory2,"/Pathway_analysis/", "HMDB_", Cell_type, "_",args[1],"_vs_", args[2], "/HMDB_table_results.tsv", sep =""),quote = FALSE, row.names = F, sep = "\t")
dev.off()
}
gc()
dir.create(path = paste(directory2,"/Pathway_analysis/", "KEGG_", Cell_type, "_",args[1],"_vs_", args[2], sep ="") ,  showWarnings = TRUE, recursive = TRUE, mode = "0777")
setwd(paste(directory2,"/Pathway_analysis/", "KEGG_", Cell_type, "_",args[1],"_vs_", args[2], sep =""))
pdf(file=paste("Pathway_analysis_KEGG_", args[1],"_",args[2],"_", Cell_type,".pdf", sep=""))
head(pathway_class_KEGG)
remain_idx =
pathway_class_KEGG %>%
unlist() %>%
stringr::str_detect("Disease") %>%
`!`() %>%
which()
remain_idx
pathway_database =
kegg_hsa_pathway[remain_idx]
pathway_database
result =
enrich_kegg(query_id = unique(query_id$KEGG),
query_type = "compound",
id_type = "KEGG",
pathway_database = pathway_database,
p_cutoff = 0.05,
p_adjust_method = "BH",
threads = as.numeric(COMMAND_ADVANCED[3,3]))
result
if (length(result) != 0){
x <-enrich_bar_plot(
object = result,
x_axis = "p_value_adjust",
cutoff = 1.1,
top = 10
)
print(x)
x<-enrich_scatter_plot(object = result)
print(x)
write.table(result@result,paste(directory2,"/Pathway_analysis/", "KEGG_", Cell_type, "_",args[1],"_vs_", args[2], "/KEGG_table_results.tsv", sep =""),quote = FALSE, row.names = F, sep = "\t")
dev.off()
}
}else{
print("NO STATISTICAL SIGNIFICANT PEAK FOR METABOLITE PATHWAY ANALYSIS")
}
##### MetaboAnalistR  #####
#Enrichment analysis
dir.create(path = paste(directory2,"/MetaboAnalyst/", "Enrichment_Analysis", sep ="") ,  showWarnings = TRUE, recursive = TRUE, mode = "0777")
setwd(paste(directory2,"/MetaboAnalyst/", "Enrichment_Analysis", sep =""))
numbe<-as.numeric(gsub("peak", "", query_id$NAME.x))
query_id<-query_id[order(numbe),]
write.table(x= query_id$HMDB[!is.na(query_id$HMDB)] , file= paste("HMDB_ID_",Cell_type,"_",args[1],"_vs_",args[2],".tsv", sep="")  ,sep= ",", row.names = FALSE, col.names = FALSE,  quote = FALSE)
write.table(x= query_id$KEGG[!is.na(query_id$KEGG )] , file= paste("KEGG_ID_",Cell_type,"_",args[1],"_vs_",args[2],".tsv",sep="")  ,sep= ",", row.names = FALSE, col.names = FALSE,  quote = FALSE)
write.table(x= query_id$name[!is.na(query_id$name )] , file= paste("Compound_names_",Cell_type,"_",args[1],"_vs_",args[2],".tsv",sep="")  ,sep= ",", row.names = FALSE, col.names = FALSE,  quote = FALSE)
numbe<-as.numeric(gsub("peak", "", query_id_saved$NAME.x))
query_id_saved<-query_id_saved[order(numbe),]
write.table(x= query_id_saved[,c(3,1,21,14)] , file= paste("HMDB_KEGG_Compound_names_",Cell_type,"_",args[1],"_vs_",args[2],"_complete",".tsv",sep="")  ,sep= "\t", row.names = FALSE, col.names = TRUE,  quote = FALSE)
#Pathway analysis
dir.create(path = paste(directory2,"/MetaboAnalyst/", "Pathway_Analysis", sep ="") ,  showWarnings = TRUE, recursive = TRUE, mode = "0777")
setwd(paste(directory2,"/MetaboAnalyst/", "Pathway_Analysis", sep =""))
write.table(x= query_id$HMDB[!is.na(query_id$HMDB)] , file= paste("HMDB_ID_",Cell_type,"_",args[1],"_vs_",args[2],".tsv",sep="")  ,sep= ",", row.names = FALSE, col.names = FALSE,  quote = FALSE)
write.table(x= query_id$KEGG[!is.na(query_id$KEGG )] , file= paste("KEGG_ID_",Cell_type,"_",args[1],"_vs_",args[2],".tsv",sep="")  ,sep= ",", row.names = FALSE, col.names = FALSE,  quote = FALSE)
write.table(x= query_id$name[!is.na(query_id$name )] , file= paste("Compound_names_",Cell_type,"_",args[1],"_vs_",args[2],".tsv",sep="")  ,sep= ",", row.names = FALSE, col.names = FALSE,  quote = FALSE)
write.table(x= query_id_saved[,c(3,1,21,14)] , file= paste("HMDB_KEGG_Compound_names_",Cell_type,"_",args[1],"_vs_",args[2],"_complete.tsv",sep="")  ,sep= "\t", row.names = FALSE, col.names = TRUE,  quote = FALSE)
#Joint-Pathway analysis
dir.create(path = paste(directory2,"/MetaboAnalyst/", "Joint_Pathway_Analysis", sep ="") ,  showWarnings = TRUE, recursive = TRUE, mode = "0777")
setwd(paste(directory2,"/MetaboAnalyst/", "Joint_Pathway_Analysis", sep =""))
query_id_select <- query_id[,c("HMDB", "KEGG", "name", "log2FC")]
write.table(x= query_id_select[,c(1,4)] , file= paste("HMDB_ID_",Cell_type,"_",args[1],"_vs_",args[2],".tsv",sep="")  ,sep= "\t", row.names = FALSE, col.names = FALSE,  quote = FALSE)
write.table(x= query_id_select[,c(2,4)] , file= paste("KEGG_ID_",Cell_type,"_",args[1],"_vs_",args[2],".tsv",sep="")  ,sep= "\t", row.names = FALSE, col.names = FALSE,  quote = FALSE)
write.table(x= query_id_select[,c(3,4)], file= paste("Compound_names_",Cell_type,"_",args[1],"_vs_",args[2],".tsv",sep="")  ,sep= "\t", row.names = FALSE, col.names = FALSE,  quote = FALSE)
#LATE INTEGRATION TRANSCRIPTOMICS
regeX <- paste("*",args[1],"_vs_",args[2], sep="")
regeX2 <- paste(args[1],"_vs_",args[2], sep="")
files <- grep(regeX,list.files(paste(directory,"/Transcriptomics/OUTPUT",sep="")),value=TRUE)
if (length(files) != 0){
for (fil in 1:length(files)){
print(fil)
files2 <- grep("GENES[A-Z]*",list.files(paste(directory,"/Transcriptomics/OUTPUT/", files[fil],"/",regeX2, sep="")),value=TRUE)
LIST_GENE<-vroom(paste(directory,"/Transcriptomics/OUTPUT/", files[fil],"/",regeX2,"/",files2[1], sep=""), delim="\t")
LIST_GENE2<-vroom(paste(directory,"/Transcriptomics/OUTPUT/", files[fil],"/",regeX2,"/",files2[2], sep=""), delim="\t")
LIST_GENE3<-rbind(LIST_GENE, LIST_GENE2)
Sources<-str_split(files2[1], "_")[[1]][1]
print(Sources)
dir.create(path = paste(directory2,"/MetaboAnalyst/Joint_Pathway_Analysis/Transcriptomes_availables/", Sources, sep ="") ,  showWarnings = TRUE, recursive = TRUE, mode = "0777")
setwd(paste(directory2,"/MetaboAnalyst/Joint_Pathway_Analysis/Transcriptomes_availables/", Sources, sep =""))
write.table(x= LIST_GENE3[c("Gene.name", "log2FoldChange")], file= paste("GENE_ID_",Sources,"_",args[1],"_vs_",args[2],".tsv",sep="")  ,sep= "\t", row.names = FALSE, col.names = FALSE,  quote = FALSE)
}}
#LATE INTEGRATION METHYLOMICS
regeX <- paste("*",args[1],"_vs_",args[2], sep="")
regeX2 <- paste(args[1],"_vs_",args[2], sep="")
files <- grep(regeX,list.files(paste(directory,"/Methylomics/OUTPUT",sep="")),value=TRUE)
if (length(files) != 0){
for (fil in 1:length(files)){
print(fil)
files2 <- grep("GENES[A-Z]*",list.files(paste(directory,"/Methylomics/OUTPUT/", files[fil], sep="")),value=TRUE)
LIST_GENE<-vroom(paste(directory,"/Methylomics/OUTPUT/", files[fil],"/",files2[1], sep=""), delim="\t")
LIST_GENE2<-vroom(paste(directory,"/Methylomics/OUTPUT/", files[fil],"/",files2[2], sep=""), delim="\t")
LIST_GENE3<-rbind(LIST_GENE, LIST_GENE2)
Sources<-str_split(files2[1], "_")[[1]][1]
print(Sources)
dir.create(path = paste(directory2,"/MetaboAnalyst/Joint_Pathway_Analysis/Methylomics_availables/", Sources, sep ="") ,  showWarnings = TRUE, recursive = TRUE, mode = "0777")
setwd(paste(directory2,"/MetaboAnalyst/Joint_Pathway_Analysis/Methylomics_availables/", Sources, sep =""))
write.table(x= LIST_GENE3[c("gene", "logFC")], file= paste("GENE_ID_",Sources,"_",args[1],"_vs_",args[2],".tsv",sep="")  ,sep= "\t", row.names = FALSE, col.names = FALSE,  quote = FALSE)
}}
#Network analysis
dir.create(path = paste(directory2,"/MetaboAnalyst/", "Network_Analysis", sep ="") ,  showWarnings = TRUE, recursive = TRUE, mode = "0777")
setwd(paste(directory2,"/MetaboAnalyst/", "Network_Analysis", sep =""))
query_id_select <- query_id[,c("HMDB", "KEGG", "name", "log2FC")]
write.table(x= query_id_select[,c(1,4)] , file= paste("HMDB_ID_",Cell_type,"_",args[1],"_vs_",args[2],".tsv",sep="")  ,sep= "\t", row.names = FALSE, col.names = FALSE,  quote = FALSE)
write.table(x= query_id_select[,c(2,4)] , file= paste("KEGG_ID_",Cell_type,"_",args[1],"_vs_",args[2],".tsv",sep="")  ,sep= "\t", row.names = FALSE, col.names = FALSE,  quote = FALSE)
write.table(x= query_id_select[,c(3,4)], file= paste("Compound_names_",Cell_type,"_",args[1],"_vs_",args[2],".tsv",sep="")  ,sep= "\t", row.names = FALSE, col.names = FALSE,  quote = FALSE)
#LATE INTEGRATION TRANSCRIPTOMICS
regeX <- paste("*",args[1],"_vs_",args[2], sep="")
regeX2 <- paste(args[1],"_vs_",args[2], sep="")
files <- grep(regeX,list.files(paste(directory,"/Transcriptomics/OUTPUT",sep="")),value=TRUE)
if (length(files) != 0){
for (fil in 1:length(files)){
print(fil)
files2 <- grep("GENES[A-Z]*",list.files(paste(directory,"/Transcriptomics/OUTPUT/", files[fil],"/",regeX2, sep="")),value=TRUE)
LIST_GENE<-vroom(paste(directory,"/Transcriptomics/OUTPUT/", files[fil],"/",regeX2,"/",files2[1], sep=""), delim="\t")
LIST_GENE2<-vroom(paste(directory,"/Transcriptomics/OUTPUT/", files[fil],"/",regeX2,"/",files2[2], sep=""), delim="\t")
LIST_GENE3<-rbind(LIST_GENE, LIST_GENE2)
Sources<-str_split(files2[1], "_")[[1]][1]
print(Sources)
dir.create(path = paste(directory2,"/MetaboAnalyst/Network_Analysis/Transcriptomes_availables/", Sources, sep ="") ,  showWarnings = TRUE, recursive = TRUE, mode = "0777")
setwd(paste(directory2,"/MetaboAnalyst/Network_Analysis/Transcriptomes_availables/", Sources, sep =""))
write.table(x= LIST_GENE3[c("Gene.name", "log2FoldChange")], file= paste("GENE_ID_",Sources,"_",args[1],"_vs_",args[2],".tsv",sep="")  ,sep= "\t", row.names = FALSE, col.names = FALSE,  quote = FALSE)
}}
#LATE INTEGRATION METHYLOMICS
regeX <- paste("*",args[1],"_vs_",args[2], sep="")
regeX2 <- paste(args[1],"_vs_",args[2], sep="")
files <- grep(regeX,list.files(paste(directory,"/Methylomics/OUTPUT",sep="")),value=TRUE)
if (length(files) != 0){
for (fil in 1:length(files)){
print(fil)
files2 <- grep("GENES[A-Z]*",list.files(paste(directory,"/Methylomics/OUTPUT/", files[fil], sep="")),value=TRUE)
LIST_GENE<-vroom(paste(directory,"/Methylomics/OUTPUT/", files[fil],"/",files2[1], sep=""), delim="\t")
LIST_GENE2<-vroom(paste(directory,"/Methylomics/OUTPUT/", files[fil],"/",files2[2], sep=""), delim="\t")
LIST_GENE3<-rbind(LIST_GENE, LIST_GENE2)
Sources<-str_split(files2[1], "_")[[1]][1]
print(Sources)
dir.create(path = paste(directory2,"/MetaboAnalyst/Joint_Pathway_Analysis/Methylomics_availables/", Sources, sep ="") ,  showWarnings = TRUE, recursive = TRUE, mode = "0777")
setwd(paste(directory2,"/MetaboAnalyst/Joint_Pathway_Analysis/Methylomics_availables/", Sources, sep =""))
write.table(x= LIST_GENE3[c("gene", "logFC")], file= paste("GENE_ID_",Sources,"_",args[1],"_vs_",args[2],".tsv",sep="")  ,sep= "\t", row.names = FALSE, col.names = FALSE,  quote = FALSE)
}}
#MSEA ANALYSIS
dir.create(path = paste(directory2,"/MetaboAnalyst/", "Functional_analysis_MSEA", sep ="") ,  showWarnings = TRUE, recursive = TRUE, mode = "0777")
setwd(paste(directory2,"/MetaboAnalyst/", "Functional_analysis_MSEA", sep =""))
MSEA <- total[,c("m/z","p_val", "log2FC", "RT_min" )]
colnames(MSEA) <- c("m.z","p.value", "t.score", "r.t" )
write.table(x= MSEA, file= paste("MSEA_",args[1],"_vs_",args[2],".txt",sep="")  ,sep= "\t", row.names = FALSE, col.names = TRUE,  quote = FALSE)
gc()
}
files
length(files) != 0
length(files) != 0
files
fil
files2 <- grep("GENES[A-Z]*",list.files(paste(directory,"/Transcriptomics/OUTPUT/", files[fil],"/",regeX2, sep="")),value=TRUE)
files2
files2
files2
length(files2) == 0
if (length(files) != 0){
for (fil in 1:length(files)){
print(fil)
files2 <- grep("GENES[A-Z]*",list.files(paste(directory,"/Transcriptomics/OUTPUT/", files[fil],"/",regeX2, sep="")),value=TRUE)
if (length(files2) == 0) {
message("No matching gene files found or not enough files — skipping to next")
next
}
LIST_GENE<-vroom(paste(directory,"/Transcriptomics/OUTPUT/", files[fil],"/",regeX2,"/",files2[1], sep=""), delim="\t")
LIST_GENE2<-vroom(paste(directory,"/Transcriptomics/OUTPUT/", files[fil],"/",regeX2,"/",files2[2], sep=""), delim="\t")
LIST_GENE3<-rbind(LIST_GENE, LIST_GENE2)
Sources<-str_split(files2[1], "_")[[1]][1]
print(Sources)
dir.create(path = paste(directory2,"/MetaboAnalyst/Joint_Pathway_Analysis/Transcriptomes_availables/", Sources, sep ="") ,  showWarnings = TRUE, recursive = TRUE, mode = "0777")
setwd(paste(directory2,"/MetaboAnalyst/Joint_Pathway_Analysis/Transcriptomes_availables/", Sources, sep =""))
write.table(x= LIST_GENE3[c("Gene.name", "log2FoldChange")], file= paste("GENE_ID_",Sources,"_",args[1],"_vs_",args[2],".tsv",sep="")  ,sep= "\t", row.names = FALSE, col.names = FALSE,  quote = FALSE)
}}
regeX <- paste("*",args[1],"_vs_",args[2], sep="")
regeX2 <- paste(args[1],"_vs_",args[2], sep="")
files <- grep(regeX,list.files(paste(directory,"/Methylomics/OUTPUT",sep="")),value=TRUE)
if (length(files) != 0){
for (fil in 1:length(files)){
print(fil)
files2 <- grep("GENES[A-Z]*",list.files(paste(directory,"/Methylomics/OUTPUT/", files[fil], sep="")),value=TRUE)
if (length(files2) == 0) {
message("No matching methylation files found or not enough files — skipping to next")
next
}
LIST_GENE<-vroom(paste(directory,"/Methylomics/OUTPUT/", files[fil],"/",files2[1], sep=""), delim="\t")
LIST_GENE2<-vroom(paste(directory,"/Methylomics/OUTPUT/", files[fil],"/",files2[2], sep=""), delim="\t")
LIST_GENE3<-rbind(LIST_GENE, LIST_GENE2)
Sources<-str_split(files2[1], "_")[[1]][1]
print(Sources)
dir.create(path = paste(directory2,"/MetaboAnalyst/Joint_Pathway_Analysis/Methylomics_availables/", Sources, sep ="") ,  showWarnings = TRUE, recursive = TRUE, mode = "0777")
setwd(paste(directory2,"/MetaboAnalyst/Joint_Pathway_Analysis/Methylomics_availables/", Sources, sep =""))
write.table(x= LIST_GENE3[c("gene", "logFC")], file= paste("GENE_ID_",Sources,"_",args[1],"_vs_",args[2],".tsv",sep="")  ,sep= "\t", row.names = FALSE, col.names = FALSE,  quote = FALSE)
}}
#Network analysis
dir.create(path = paste(directory2,"/MetaboAnalyst/", "Network_Analysis", sep ="") ,  showWarnings = TRUE, recursive = TRUE, mode = "0777")
setwd(paste(directory2,"/MetaboAnalyst/", "Network_Analysis", sep =""))
query_id_select <- query_id[,c("HMDB", "KEGG", "name", "log2FC")]
write.table(x= query_id_select[,c(1,4)] , file= paste("HMDB_ID_",Cell_type,"_",args[1],"_vs_",args[2],".tsv",sep="")  ,sep= "\t", row.names = FALSE, col.names = FALSE,  quote = FALSE)
write.table(x= query_id_select[,c(2,4)] , file= paste("KEGG_ID_",Cell_type,"_",args[1],"_vs_",args[2],".tsv",sep="")  ,sep= "\t", row.names = FALSE, col.names = FALSE,  quote = FALSE)
write.table(x= query_id_select[,c(3,4)], file= paste("Compound_names_",Cell_type,"_",args[1],"_vs_",args[2],".tsv",sep="")  ,sep= "\t", row.names = FALSE, col.names = FALSE,  quote = FALSE)
regeX <- paste("*",args[1],"_vs_",args[2], sep="")
regeX2 <- paste(args[1],"_vs_",args[2], sep="")
files <- grep(regeX,list.files(paste(directory,"/Transcriptomics/OUTPUT",sep="")),value=TRUE)
if (length(files) != 0){
for (fil in 1:length(files)){
print(fil)
files2 <- grep("GENES[A-Z]*",list.files(paste(directory,"/Transcriptomics/OUTPUT/", files[fil],"/",regeX2, sep="")),value=TRUE)
if (length(files2) == 0) {
message("No matching transcriptomics files found or not enough files — skipping to next")
next
}
LIST_GENE<-vroom(paste(directory,"/Transcriptomics/OUTPUT/", files[fil],"/",regeX2,"/",files2[1], sep=""), delim="\t")
LIST_GENE2<-vroom(paste(directory,"/Transcriptomics/OUTPUT/", files[fil],"/",regeX2,"/",files2[2], sep=""), delim="\t")
LIST_GENE3<-rbind(LIST_GENE, LIST_GENE2)
Sources<-str_split(files2[1], "_")[[1]][1]
print(Sources)
dir.create(path = paste(directory2,"/MetaboAnalyst/Network_Analysis/Transcriptomes_availables/", Sources, sep ="") ,  showWarnings = TRUE, recursive = TRUE, mode = "0777")
setwd(paste(directory2,"/MetaboAnalyst/Network_Analysis/Transcriptomes_availables/", Sources, sep =""))
write.table(x= LIST_GENE3[c("Gene.name", "log2FoldChange")], file= paste("GENE_ID_",Sources,"_",args[1],"_vs_",args[2],".tsv",sep="")  ,sep= "\t", row.names = FALSE, col.names = FALSE,  quote = FALSE)
}}
regeX <- paste("*",args[1],"_vs_",args[2], sep="")
regeX2 <- paste(args[1],"_vs_",args[2], sep="")
files <- grep(regeX,list.files(paste(directory,"/Methylomics/OUTPUT",sep="")),value=TRUE)
if (length(files) != 0){
for (fil in 1:length(files)){
print(fil)
files2 <- grep("GENES[A-Z]*",list.files(paste(directory,"/Methylomics/OUTPUT/", files[fil], sep="")),value=TRUE)
if (length(files2) == 0) {
message("No matching methylomics files found or not enough files — skipping to next")
next
}
LIST_GENE<-vroom(paste(directory,"/Methylomics/OUTPUT/", files[fil],"/",files2[1], sep=""), delim="\t")
LIST_GENE2<-vroom(paste(directory,"/Methylomics/OUTPUT/", files[fil],"/",files2[2], sep=""), delim="\t")
LIST_GENE3<-rbind(LIST_GENE, LIST_GENE2)
Sources<-str_split(files2[1], "_")[[1]][1]
print(Sources)
dir.create(path = paste(directory2,"/MetaboAnalyst/Joint_Pathway_Analysis/Methylomics_availables/", Sources, sep ="") ,  showWarnings = TRUE, recursive = TRUE, mode = "0777")
setwd(paste(directory2,"/MetaboAnalyst/Joint_Pathway_Analysis/Methylomics_availables/", Sources, sep =""))
write.table(x= LIST_GENE3[c("gene", "logFC")], file= paste("GENE_ID_",Sources,"_",args[1],"_vs_",args[2],".tsv",sep="")  ,sep= "\t", row.names = FALSE, col.names = FALSE,  quote = FALSE)
}}
dir.create(path = paste(directory2,"/MetaboAnalyst/", "Functional_analysis_MSEA", sep ="") ,  showWarnings = TRUE, recursive = TRUE, mode = "0777")
setwd(paste(directory2,"/MetaboAnalyst/", "Functional_analysis_MSEA", sep =""))
MSEA <- total[,c("m/z","p_val", "log2FC", "RT_min" )]
colnames(MSEA) <- c("m.z","p.value", "t.score", "r.t" )
write.table(x= MSEA, file= paste("MSEA_",args[1],"_vs_",args[2],".txt",sep="")  ,sep= "\t", row.names = FALSE, col.names = TRUE,  quote = FALSE)
gc()
